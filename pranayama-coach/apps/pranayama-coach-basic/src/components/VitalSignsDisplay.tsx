import React from 'react';\nimport {\n  View,\n  Text,\n  StyleSheet,\n} from 'react-native';\nimport { VitalSignsData } from '../types/vitalSigns';\n\ninterface VitalSignsDisplayProps {\n  data: VitalSignsData | null;\n  isMonitoring: boolean;\n  compact?: boolean;\n}\n\nconst VitalSignsDisplay: React.FC<VitalSignsDisplayProps> = ({\n  data,\n  isMonitoring,\n  compact = false,\n}) => {\n  const formatValue = (value: number | undefined, unit: string, precision = 0) => {\n    if (value === undefined || value === 0) return '--';\n    return `${value.toFixed(precision)}${unit}`;\n  };\n\n  const getHeartRateColor = (hr?: number) => {\n    if (!hr) return '#9ca3af';\n    if (hr < 60) return '#3b82f6'; // Blue - low\n    if (hr < 100) return '#10b981'; // Green - normal\n    if (hr < 120) return '#f59e0b'; // Yellow - elevated\n    return '#ef4444'; // Red - high\n  };\n\n  const getHRVColor = (hrv?: number) => {\n    if (!hrv) return '#9ca3af';\n    if (hrv > 50) return '#10b981'; // Green - excellent\n    if (hrv > 30) return '#3b82f6'; // Blue - good\n    if (hrv > 20) return '#f59e0b'; // Yellow - fair\n    return '#ef4444'; // Red - poor\n  };\n\n  const getSpO2Color = (spo2?: number) => {\n    if (!spo2) return '#9ca3af';\n    if (spo2 >= 98) return '#10b981'; // Green - excellent\n    if (spo2 >= 95) return '#3b82f6'; // Blue - good\n    if (spo2 >= 90) return '#f59e0b'; // Yellow - concerning\n    return '#ef4444'; // Red - critical\n  };\n\n  if (compact) {\n    return (\n      <View style={styles.compactContainer}>\n        <View style={styles.compactItem}>\n          <Text style={[styles.compactValue, { color: getHeartRateColor(data?.heartRate) }]}>\n            {formatValue(data?.heartRate, '')}\n          </Text>\n          <Text style={styles.compactLabel}>HR</Text>\n        </View>\n        \n        <View style={styles.compactItem}>\n          <Text style={[styles.compactValue, { color: getHRVColor(data?.hrv) }]}>\n            {formatValue(data?.hrv, '')}\n          </Text>\n          <Text style={styles.compactLabel}>HRV</Text>\n        </View>\n        \n        <View style={styles.compactItem}>\n          <Text style={[styles.compactValue, { color: getSpO2Color(data?.spO2) }]}>\n            {formatValue(data?.spO2, '%')}\n          </Text>\n          <Text style={styles.compactLabel}>SpO2</Text>\n        </View>\n        \n        <View style={styles.compactItem}>\n          <Text style={styles.compactValue}>\n            {formatValue(data?.breathingRate, '')}\n          </Text>\n          <Text style={styles.compactLabel}>BR</Text>\n        </View>\n      </View>\n    );\n  }\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.header}>\n        <Text style={styles.title}>Vital Signs</Text>\n        <View style={[styles.statusIndicator, isMonitoring && styles.statusActive]}>\n          <Text style={styles.statusText}>\n            {isMonitoring ? 'Monitoring' : 'Stopped'}\n          </Text>\n        </View>\n      </View>\n      \n      <View style={styles.metricsGrid}>\n        <View style={styles.metricCard}>\n          <Text style={styles.metricLabel}>Heart Rate</Text>\n          <Text style={[styles.metricValue, { color: getHeartRateColor(data?.heartRate) }]}>\n            {formatValue(data?.heartRate, ' BPM')}\n          </Text>\n          <Text style={styles.metricRange}>60-100 normal</Text>\n        </View>\n        \n        <View style={styles.metricCard}>\n          <Text style={styles.metricLabel}>HRV</Text>\n          <Text style={[styles.metricValue, { color: getHRVColor(data?.hrv) }]}>\n            {formatValue(data?.hrv, ' ms')}\n          </Text>\n          <Text style={styles.metricRange}>30+ good</Text>\n        </View>\n        \n        <View style={styles.metricCard}>\n          <Text style={styles.metricLabel}>SpO2</Text>\n          <Text style={[styles.metricValue, { color: getSpO2Color(data?.spO2) }]}>\n            {formatValue(data?.spO2, '%')}\n          </Text>\n          <Text style={styles.metricRange}>95%+ normal</Text>\n        </View>\n        \n        <View style={styles.metricCard}>\n          <Text style={styles.metricLabel}>Breathing Rate</Text>\n          <Text style={styles.metricValue}>\n            {formatValue(data?.breathingRate, ' BPM')}\n          </Text>\n          <Text style={styles.metricRange}>12-20 normal</Text>\n        </View>\n      </View>\n      \n      {!isMonitoring && (\n        <Text style={styles.instructions}>\n          Start monitoring to see real-time vital signs\n        </Text>\n      )}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: 'white',\n    borderRadius: 15,\n    padding: 20,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.1,\n    shadowRadius: 4,\n    elevation: 3,\n  },\n  compactContainer: {\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n    alignItems: 'center',\n  },\n  compactItem: {\n    alignItems: 'center',\n  },\n  compactValue: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    marginBottom: 4,\n  },\n  compactLabel: {\n    fontSize: 12,\n    color: '#6b7280',\n    fontWeight: '500',\n  },\n  header: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 20,\n  },\n  title: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: '#1f2937',\n  },\n  statusIndicator: {\n    paddingHorizontal: 12,\n    paddingVertical: 4,\n    borderRadius: 12,\n    backgroundColor: '#f3f4f6',\n  },\n  statusActive: {\n    backgroundColor: '#dcfce7',\n  },\n  statusText: {\n    fontSize: 12,\n    fontWeight: '500',\n    color: '#6b7280',\n  },\n  metricsGrid: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    justifyContent: 'space-between',\n  },\n  metricCard: {\n    width: '48%',\n    backgroundColor: '#f8fafc',\n    borderRadius: 12,\n    padding: 15,\n    marginBottom: 15,\n    alignItems: 'center',\n  },\n  metricLabel: {\n    fontSize: 12,\n    color: '#6b7280',\n    marginBottom: 8,\n    fontWeight: '500',\n  },\n  metricValue: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    marginBottom: 4,\n  },\n  metricRange: {\n    fontSize: 10,\n    color: '#9ca3af',\n  },\n  instructions: {\n    textAlign: 'center',\n    color: '#6b7280',\n    fontSize: 14,\n    fontStyle: 'italic',\n    marginTop: 10,\n  },\n});\n\nexport default VitalSignsDisplay;