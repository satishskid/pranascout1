import React, { useEffect, useRef } from 'react';\nimport {\n  View,\n  Text,\n  StyleSheet,\n  Animated,\n} from 'react-native';\n\ninterface StressMeterProps {\n  level: number; // 0-10 stress level\n  size?: number;\n  showLabel?: boolean;\n}\n\nconst StressMeter: React.FC<StressMeterProps> = ({\n  level,\n  size = 100,\n  showLabel = true,\n}) => {\n  const animatedValue = useRef(new Animated.Value(0)).current;\n  const circumference = 2 * Math.PI * (size / 2 - 10);\n  \n  useEffect(() => {\n    Animated.timing(animatedValue, {\n      toValue: level / 10,\n      duration: 1000,\n      useNativeDriver: false,\n    }).start();\n  }, [level]);\n\n  const getStressColor = (stressLevel: number) => {\n    if (stressLevel <= 3) return '#10b981'; // Green - calm\n    if (stressLevel <= 5) return '#3b82f6'; // Blue - mild\n    if (stressLevel <= 7) return '#f59e0b'; // Yellow - moderate\n    return '#ef4444'; // Red - high stress\n  };\n\n  const getStressLabel = (stressLevel: number) => {\n    if (stressLevel <= 2) return 'Very Calm';\n    if (stressLevel <= 4) return 'Calm';\n    if (stressLevel <= 6) return 'Mild Stress';\n    if (stressLevel <= 8) return 'Stressed';\n    return 'High Stress';\n  };\n\n  const strokeDashoffset = animatedValue.interpolate({\n    inputRange: [0, 1],\n    outputRange: [circumference, 0],\n  });\n\n  const color = getStressColor(level);\n\n  return (\n    <View style={[styles.container, { width: size, height: size }]}>\n      {/* Background circle */}\n      <View style={[styles.circle, { width: size, height: size, borderRadius: size / 2 }]}>\n        <View style={[styles.backgroundCircle, { \n          width: size - 20, \n          height: size - 20, \n          borderRadius: (size - 20) / 2,\n          borderColor: '#f3f4f6',\n          borderWidth: 8,\n        }]} />\n        \n        {/* Progress circle - This would need a library like react-native-svg for proper implementation */}\n        <View style={[styles.progressCircle, {\n          width: size - 20,\n          height: size - 20,\n          borderRadius: (size - 20) / 2,\n          borderTopColor: color,\n          borderRightColor: level > 2.5 ? color : 'transparent',\n          borderBottomColor: level > 5 ? color : 'transparent',\n          borderLeftColor: level > 7.5 ? color : 'transparent',\n          borderWidth: 8,\n        }]} />\n      </View>\n      \n      {/* Center content */}\n      <View style={styles.centerContent}>\n        <Text style={[styles.stressValue, { color }]}>\n          {level.toFixed(1)}\n        </Text>\n        {showLabel && (\n          <Text style={[styles.stressLabel, { color }]}>\n            {getStressLabel(level)}\n          </Text>\n        )}\n      </View>\n      \n      {/* Scale indicators */}\n      <View style={styles.scaleContainer}>\n        {[0, 2.5, 5, 7.5, 10].map((value, index) => (\n          <View\n            key={value}\n            style={[\n              styles.scaleIndicator,\n              {\n                backgroundColor: getStressColor(value),\n                opacity: level >= value ? 1 : 0.3,\n                transform: [\n                  { rotate: `${(value / 10) * 270 - 135}deg` },\n                  { translateY: -(size / 2 - 15) },\n                ],\n              },\n            ]}\n          />\n        ))}\n      </View>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    position: 'relative',\n  },\n  circle: {\n    position: 'absolute',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  backgroundCircle: {\n    position: 'absolute',\n  },\n  progressCircle: {\n    position: 'absolute',\n    borderTopColor: 'transparent',\n    borderRightColor: 'transparent',\n    borderBottomColor: 'transparent',\n    borderLeftColor: 'transparent',\n    transform: [{ rotate: '-135deg' }],\n  },\n  centerContent: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    zIndex: 1,\n  },\n  stressValue: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    marginBottom: 2,\n  },\n  stressLabel: {\n    fontSize: 10,\n    fontWeight: '600',\n    textAlign: 'center',\n  },\n  scaleContainer: {\n    position: 'absolute',\n    width: '100%',\n    height: '100%',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  scaleIndicator: {\n    position: 'absolute',\n    width: 3,\n    height: 8,\n    borderRadius: 1.5,\n  },\n});\n\nexport default StressMeter;