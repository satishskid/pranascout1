import React, { useState } from 'react';\nimport {\n  Box,\n  Card,\n  CardContent,\n  Typography,\n  Grid,\n  Switch,\n  FormControlLabel,\n  TextField,\n  Button,\n  Divider,\n  Alert,\n  Select,\n  MenuItem,\n  FormControl,\n  InputLabel,\n  Avatar,\n  Chip,\n  List,\n  ListItem,\n  ListItemText,\n  ListItemSecondaryAction,\n  IconButton,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Tab,\n  Tabs,\n} from '@mui/material';\nimport {\n  Settings as SettingsIcon,\n  Security,\n  Notifications,\n  Database,\n  CloudSync,\n  Edit,\n  Delete,\n  Add,\n  Save,\n  Refresh,\n} from '@mui/icons-material';\nimport { useAuth } from '../context/AuthContext';\n\ninterface TabPanelProps {\n  children?: React.ReactNode;\n  index: number;\n  value: number;\n}\n\nconst TabPanel: React.FC<TabPanelProps> = ({ children, value, index }) => {\n  return (\n    <div hidden={value !== index}>\n      {value === index && <Box sx={{ pt: 3 }}>{children}</Box>}\n    </div>\n  );\n};\n\nconst Settings: React.FC = () => {\n  const { user } = useAuth();\n  const [tabValue, setTabValue] = useState(0);\n  const [loading, setLoading] = useState(false);\n  const [success, setSuccess] = useState<string | null>(null);\n  const [error, setError] = useState<string | null>(null);\n  \n  // General Settings\n  const [generalSettings, setGeneralSettings] = useState({\n    appName: 'Pranayama Coach',\n    supportEmail: 'support@pranayamacoach.com',\n    maxSessionDuration: 60,\n    defaultBreathingRate: 16,\n    enableDataExport: true,\n    enableAnalytics: true,\n  });\n  \n  // Security Settings\n  const [securitySettings, setSecuritySettings] = useState({\n    requireTwoFactor: false,\n    sessionTimeout: 30,\n    passwordExpiry: 90,\n    enableAuditLogging: true,\n    enableEncryption: true,\n  });\n  \n  // Notification Settings\n  const [notificationSettings, setNotificationSettings] = useState({\n    emailNotifications: true,\n    systemAlerts: true,\n    userActivityAlerts: false,\n    maintenanceAlerts: true,\n    securityAlerts: true,\n  });\n  \n  // API Keys Dialog\n  const [apiKeyDialog, setApiKeyDialog] = useState(false);\n  const [newApiKey, setNewApiKey] = useState('');\n  \n  const mockApiKeys = [\n    { id: '1', name: 'Mobile App Production', key: 'pk_live_***************', created: '2025-01-01' },\n    { id: '2', name: 'Mobile App Development', key: 'pk_test_***************', created: '2025-01-05' },\n    { id: '3', name: 'Analytics Dashboard', key: 'pk_analytics_***********', created: '2025-01-07' },\n  ];\n\n  const handleSaveSettings = async (section: string) => {\n    setLoading(true);\n    setError(null);\n    \n    try {\n      // Simulate API call\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      setSuccess(`${section} settings saved successfully`);\n      setTimeout(() => setSuccess(null), 3000);\n    } catch (err) {\n      setError(`Failed to save ${section} settings`);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleGenerateApiKey = () => {\n    // Simulate API key generation\n    const newKey = `pk_${Math.random().toString(36).substr(2, 15)}`;\n    setNewApiKey(newKey);\n    setApiKeyDialog(true);\n  };\n\n  return (\n    <Box>\n      {/* Header */}\n      <Box display=\"flex\" alignItems=\"center\" mb={3}>\n        <Avatar sx={{ bgcolor: 'primary.main', mr: 2 }}>\n          <SettingsIcon />\n        </Avatar>\n        <Typography variant=\"h4\" component=\"h1\">\n          Settings\n        </Typography>\n      </Box>\n\n      {success && (\n        <Alert severity=\"success\" sx={{ mb: 3 }}>\n          {success}\n        </Alert>\n      )}\n      \n      {error && (\n        <Alert severity=\"error\" sx={{ mb: 3 }}>\n          {error}\n        </Alert>\n      )}\n\n      {/* Settings Tabs */}\n      <Card>\n        <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\n          <Tabs value={tabValue} onChange={(_, newValue) => setTabValue(newValue)}>\n            <Tab label=\"General\" icon={<SettingsIcon />} />\n            <Tab label=\"Security\" icon={<Security />} />\n            <Tab label=\"Notifications\" icon={<Notifications />} />\n            <Tab label=\"API Keys\" icon={<Database />} />\n            <Tab label=\"System\" icon={<CloudSync />} />\n          </Tabs>\n        </Box>\n\n        {/* General Settings */}\n        <TabPanel value={tabValue} index={0}>\n          <CardContent>\n            <Typography variant=\"h6\" gutterBottom>\n              Application Settings\n            </Typography>\n            \n            <Grid container spacing={3}>\n              <Grid item xs={12} md={6}>\n                <TextField\n                  fullWidth\n                  label=\"Application Name\"\n                  value={generalSettings.appName}\n                  onChange={(e) => setGeneralSettings(prev => ({ ...prev, appName: e.target.value }))}\n                  margin=\"normal\"\n                />\n              </Grid>\n              \n              <Grid item xs={12} md={6}>\n                <TextField\n                  fullWidth\n                  label=\"Support Email\"\n                  type=\"email\"\n                  value={generalSettings.supportEmail}\n                  onChange={(e) => setGeneralSettings(prev => ({ ...prev, supportEmail: e.target.value }))}\n                  margin=\"normal\"\n                />\n              </Grid>\n              \n              <Grid item xs={12} md={6}>\n                <TextField\n                  fullWidth\n                  label=\"Max Session Duration (minutes)\"\n                  type=\"number\"\n                  value={generalSettings.maxSessionDuration}\n                  onChange={(e) => setGeneralSettings(prev => ({ ...prev, maxSessionDuration: parseInt(e.target.value) }))}\n                  margin=\"normal\"\n                />\n              </Grid>\n              \n              <Grid item xs={12} md={6}>\n                <TextField\n                  fullWidth\n                  label=\"Default Breathing Rate (BPM)\"\n                  type=\"number\"\n                  value={generalSettings.defaultBreathingRate}\n                  onChange={(e) => setGeneralSettings(prev => ({ ...prev, defaultBreathingRate: parseInt(e.target.value) }))}\n                  margin=\"normal\"\n                />\n              </Grid>\n              \n              <Grid item xs={12}>\n                <FormControlLabel\n                  control={\n                    <Switch\n                      checked={generalSettings.enableDataExport}\n                      onChange={(e) => setGeneralSettings(prev => ({ ...prev, enableDataExport: e.target.checked }))}\n                    />\n                  }\n                  label=\"Enable Data Export\"\n                />\n              </Grid>\n              \n              <Grid item xs={12}>\n                <FormControlLabel\n                  control={\n                    <Switch\n                      checked={generalSettings.enableAnalytics}\n                      onChange={(e) => setGeneralSettings(prev => ({ ...prev, enableAnalytics: e.target.checked }))}\n                    />\n                  }\n                  label=\"Enable Analytics Collection\"\n                />\n              </Grid>\n              \n              <Grid item xs={12}>\n                <Button\n                  variant=\"contained\"\n                  onClick={() => handleSaveSettings('General')}\n                  disabled={loading}\n                  startIcon={<Save />}\n                >\n                  Save General Settings\n                </Button>\n              </Grid>\n            </Grid>\n          </CardContent>\n        </TabPanel>\n\n        {/* Security Settings */}\n        <TabPanel value={tabValue} index={1}>\n          <CardContent>\n            <Typography variant=\"h6\" gutterBottom>\n              Security Configuration\n            </Typography>\n            \n            <Grid container spacing={3}>\n              <Grid item xs={12}>\n                <FormControlLabel\n                  control={\n                    <Switch\n                      checked={securitySettings.requireTwoFactor}\n                      onChange={(e) => setSecuritySettings(prev => ({ ...prev, requireTwoFactor: e.target.checked }))}\n                    />\n                  }\n                  label=\"Require Two-Factor Authentication\"\n                />\n              </Grid>\n              \n              <Grid item xs={12} md={6}>\n                <FormControl fullWidth margin=\"normal\">\n                  <InputLabel>Session Timeout (minutes)</InputLabel>\n                  <Select\n                    value={securitySettings.sessionTimeout}\n                    label=\"Session Timeout (minutes)\"\n                    onChange={(e) => setSecuritySettings(prev => ({ ...prev, sessionTimeout: e.target.value as number }))}\n                  >\n                    <MenuItem value={15}>15 minutes</MenuItem>\n                    <MenuItem value={30}>30 minutes</MenuItem>\n                    <MenuItem value={60}>1 hour</MenuItem>\n                    <MenuItem value={240}>4 hours</MenuItem>\n                  </Select>\n                </FormControl>\n              </Grid>\n              \n              <Grid item xs={12} md={6}>\n                <FormControl fullWidth margin=\"normal\">\n                  <InputLabel>Password Expiry (days)</InputLabel>\n                  <Select\n                    value={securitySettings.passwordExpiry}\n                    label=\"Password Expiry (days)\"\n                    onChange={(e) => setSecuritySettings(prev => ({ ...prev, passwordExpiry: e.target.value as number }))}\n                  >\n                    <MenuItem value={30}>30 days</MenuItem>\n                    <MenuItem value={60}>60 days</MenuItem>\n                    <MenuItem value={90}>90 days</MenuItem>\n                    <MenuItem value={0}>Never</MenuItem>\n                  </Select>\n                </FormControl>\n              </Grid>\n              \n              <Grid item xs={12}>\n                <FormControlLabel\n                  control={\n                    <Switch\n                      checked={securitySettings.enableAuditLogging}\n                      onChange={(e) => setSecuritySettings(prev => ({ ...prev, enableAuditLogging: e.target.checked }))}\n                    />\n                  }\n                  label=\"Enable Audit Logging\"\n                />\n              </Grid>\n              \n              <Grid item xs={12}>\n                <FormControlLabel\n                  control={\n                    <Switch\n                      checked={securitySettings.enableEncryption}\n                      onChange={(e) => setSecuritySettings(prev => ({ ...prev, enableEncryption: e.target.checked }))}\n                      disabled\n                    />\n                  }\n                  label=\"Enable Data Encryption (Required for HIPAA compliance)\"\n                />\n              </Grid>\n              \n              <Grid item xs={12}>\n                <Button\n                  variant=\"contained\"\n                  onClick={() => handleSaveSettings('Security')}\n                  disabled={loading}\n                  startIcon={<Save />}\n                >\n                  Save Security Settings\n                </Button>\n              </Grid>\n            </Grid>\n          </CardContent>\n        </TabPanel>\n\n        {/* Notification Settings */}\n        <TabPanel value={tabValue} index={2}>\n          <CardContent>\n            <Typography variant=\"h6\" gutterBottom>\n              Notification Preferences\n            </Typography>\n            \n            <Grid container spacing={3}>\n              <Grid item xs={12}>\n                <FormControlLabel\n                  control={\n                    <Switch\n                      checked={notificationSettings.emailNotifications}\n                      onChange={(e) => setNotificationSettings(prev => ({ ...prev, emailNotifications: e.target.checked }))}\n                    />\n                  }\n                  label=\"Email Notifications\"\n                />\n              </Grid>\n              \n              <Grid item xs={12}>\n                <FormControlLabel\n                  control={\n                    <Switch\n                      checked={notificationSettings.systemAlerts}\n                      onChange={(e) => setNotificationSettings(prev => ({ ...prev, systemAlerts: e.target.checked }))}\n                    />\n                  }\n                  label=\"System Alerts\"\n                />\n              </Grid>\n              \n              <Grid item xs={12}>\n                <FormControlLabel\n                  control={\n                    <Switch\n                      checked={notificationSettings.userActivityAlerts}\n                      onChange={(e) => setNotificationSettings(prev => ({ ...prev, userActivityAlerts: e.target.checked }))}\n                    />\n                  }\n                  label=\"User Activity Alerts\"\n                />\n              </Grid>\n              \n              <Grid item xs={12}>\n                <FormControlLabel\n                  control={\n                    <Switch\n                      checked={notificationSettings.maintenanceAlerts}\n                      onChange={(e) => setNotificationSettings(prev => ({ ...prev, maintenanceAlerts: e.target.checked }))}\n                    />\n                  }\n                  label=\"Maintenance Alerts\"\n                />\n              </Grid>\n              \n              <Grid item xs={12}>\n                <FormControlLabel\n                  control={\n                    <Switch\n                      checked={notificationSettings.securityAlerts}\n                      onChange={(e) => setNotificationSettings(prev => ({ ...prev, securityAlerts: e.target.checked }))}\n                      disabled\n                    />\n                  }\n                  label=\"Security Alerts (Required)\"\n                />\n              </Grid>\n              \n              <Grid item xs={12}>\n                <Button\n                  variant=\"contained\"\n                  onClick={() => handleSaveSettings('Notification')}\n                  disabled={loading}\n                  startIcon={<Save />}\n                >\n                  Save Notification Settings\n                </Button>\n              </Grid>\n            </Grid>\n          </CardContent>\n        </TabPanel>\n\n        {/* API Keys */}\n        <TabPanel value={tabValue} index={3}>\n          <CardContent>\n            <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={3}>\n              <Typography variant=\"h6\">\n                API Key Management\n              </Typography>\n              <Button\n                variant=\"contained\"\n                onClick={handleGenerateApiKey}\n                startIcon={<Add />}\n              >\n                Generate New Key\n              </Button>\n            </Box>\n            \n            <List>\n              {mockApiKeys.map((apiKey) => (\n                <React.Fragment key={apiKey.id}>\n                  <ListItem>\n                    <ListItemText\n                      primary={apiKey.name}\n                      secondary={\n                        <Box>\n                          <Typography variant=\"body2\" component=\"span\" fontFamily=\"monospace\">\n                            {apiKey.key}\n                          </Typography>\n                          <br />\n                          <Typography variant=\"caption\" color=\"textSecondary\">\n                            Created: {apiKey.created}\n                          </Typography>\n                        </Box>\n                      }\n                    />\n                    <ListItemSecondaryAction>\n                      <IconButton edge=\"end\" aria-label=\"edit\">\n                        <Edit />\n                      </IconButton>\n                      <IconButton edge=\"end\" aria-label=\"delete\">\n                        <Delete />\n                      </IconButton>\n                    </ListItemSecondaryAction>\n                  </ListItem>\n                  <Divider />\n                </React.Fragment>\n              ))}\n            </List>\n          </CardContent>\n        </TabPanel>\n\n        {/* System Settings */}\n        <TabPanel value={tabValue} index={4}>\n          <CardContent>\n            <Typography variant=\"h6\" gutterBottom>\n              System Information\n            </Typography>\n            \n            <Grid container spacing={3}>\n              <Grid item xs={12} md={6}>\n                <Card variant=\"outlined\">\n                  <CardContent>\n                    <Typography variant=\"subtitle1\" gutterBottom>\n                      Application Status\n                    </Typography>\n                    <Box display=\"flex\" alignItems=\"center\" mb={1}>\n                      <Chip label=\"Online\" color=\"success\" size=\"small\" />\n                      <Typography variant=\"body2\" sx={{ ml: 1 }}>\n                        All systems operational\n                      </Typography>\n                    </Box>\n                    <Typography variant=\"caption\" color=\"textSecondary\">\n                      Version: 1.0.0\n                    </Typography>\n                  </CardContent>\n                </Card>\n              </Grid>\n              \n              <Grid item xs={12} md={6}>\n                <Card variant=\"outlined\">\n                  <CardContent>\n                    <Typography variant=\"subtitle1\" gutterBottom>\n                      Database Status\n                    </Typography>\n                    <Box display=\"flex\" alignItems=\"center\" mb={1}>\n                      <Chip label=\"Connected\" color=\"success\" size=\"small\" />\n                      <Typography variant=\"body2\" sx={{ ml: 1 }}>\n                        MongoDB Atlas\n                      </Typography>\n                    </Box>\n                    <Typography variant=\"caption\" color=\"textSecondary\">\n                      Last backup: 2 hours ago\n                    </Typography>\n                  </CardContent>\n                </Card>\n              </Grid>\n              \n              <Grid item xs={12}>\n                <Box display=\"flex\" gap={2}>\n                  <Button variant=\"outlined\" startIcon={<Refresh />}>\n                    Refresh System Status\n                  </Button>\n                  <Button variant=\"outlined\">\n                    Download Logs\n                  </Button>\n                  <Button variant=\"outlined\">\n                    Backup Database\n                  </Button>\n                </Box>\n              </Grid>\n            </Grid>\n          </CardContent>\n        </TabPanel>\n      </Card>\n\n      {/* API Key Generation Dialog */}\n      <Dialog\n        open={apiKeyDialog}\n        onClose={() => setApiKeyDialog(false)}\n        maxWidth=\"sm\"\n        fullWidth\n      >\n        <DialogTitle>New API Key Generated</DialogTitle>\n        <DialogContent>\n          <Alert severity=\"info\" sx={{ mb: 2 }}>\n            Please copy this key now. For security reasons, it won't be shown again.\n          </Alert>\n          <TextField\n            fullWidth\n            label=\"API Key\"\n            value={newApiKey}\n            InputProps={{\n              readOnly: true,\n              style: { fontFamily: 'monospace' },\n            }}\n            margin=\"normal\"\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setApiKeyDialog(false)}>Close</Button>\n          <Button\n            variant=\"contained\"\n            onClick={() => {\n              navigator.clipboard.writeText(newApiKey);\n              setApiKeyDialog(false);\n            }}\n          >\n            Copy Key\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Box>\n  );\n};\n\nexport default Settings;