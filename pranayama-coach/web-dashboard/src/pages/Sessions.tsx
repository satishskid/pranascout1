import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Card,\n  CardContent,\n  Typography,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  TablePagination,\n  Chip,\n  Grid,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  TextField,\n  Button,\n  IconButton,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Avatar,\n  LinearProgress,\n  Alert,\n  CircularProgress,\n} from '@mui/material';\nimport {\n  SelfImprovement,\n  Psychology,\n  DirectionsWalk,\n  Air,\n  Visibility,\n  Download,\n  FilterList,\n  AccessTime,\n  Favorite,\n  TrendingUp,\n} from '@mui/icons-material';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\nimport { format, subDays } from 'date-fns';\nimport { ApiService, Session } from '../services/ApiService';\n\nconst Sessions: React.FC = () => {\n  // State\n  const [sessions, setSessions] = useState<Session[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [page, setPage] = useState(0);\n  const [rowsPerPage, setRowsPerPage] = useState(25);\n  const [total, setTotal] = useState(0);\n  const [typeFilter, setTypeFilter] = useState('');\n  const [userSearch, setUserSearch] = useState('');\n  const [selectedSession, setSelectedSession] = useState<Session | null>(null);\n  const [detailDialogOpen, setDetailDialogOpen] = useState(false);\n\n  // Mock data for demonstration\n  const mockSessions: Session[] = [\n    {\n      _id: '1',\n      userId: 'user1',\n      type: 'pranayama',\n      startTime: new Date('2025-01-07T09:00:00'),\n      endTime: new Date('2025-01-07T09:15:00'),\n      duration: 15,\n      completed: true,\n      vitalSigns: {\n        avgHeartRate: 72,\n        avgHRV: 42,\n        avgSpO2: 98,\n        avgBreathingRate: 12,\n        stressLevel: 3.2,\n      },\n      userExperience: {\n        difficultyRating: 3,\n        energyBefore: 6,\n        energyAfter: 8,\n        stressBefore: 7,\n        stressAfter: 4,\n        enjoymentRating: 8,\n      },\n    },\n    {\n      _id: '2',\n      userId: 'user2',\n      type: 'meditation',\n      startTime: new Date('2025-01-07T10:30:00'),\n      endTime: new Date('2025-01-07T11:00:00'),\n      duration: 30,\n      completed: true,\n      vitalSigns: {\n        avgHeartRate: 68,\n        avgHRV: 38,\n        stressLevel: 2.8,\n      },\n      userExperience: {\n        difficultyRating: 2,\n        energyBefore: 5,\n        energyAfter: 7,\n        stressBefore: 6,\n        stressAfter: 3,\n        enjoymentRating: 9,\n      },\n    },\n    {\n      _id: '3',\n      userId: 'user3',\n      type: 'pranayama',\n      startTime: new Date('2025-01-07T14:15:00'),\n      endTime: new Date('2025-01-07T14:25:00'),\n      duration: 10,\n      completed: false,\n      vitalSigns: {\n        avgHeartRate: 78,\n        avgHRV: 35,\n        stressLevel: 4.1,\n      },\n      userExperience: {\n        difficultyRating: 4,\n        energyBefore: 4,\n      },\n    },\n  ];\n\n  // Mock vital signs data for detail view\n  const mockVitalSignsTimeline = [\n    { time: '0:00', heartRate: 75, hrv: 40, stress: 4.0 },\n    { time: '0:05', heartRate: 72, hrv: 42, stress: 3.5 },\n    { time: '0:10', heartRate: 68, hrv: 45, stress: 3.0 },\n    { time: '0:15', heartRate: 70, hrv: 43, stress: 2.8 },\n  ];\n\n  // Load sessions\n  const loadSessions = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      // Simulate API call\n      setTimeout(() => {\n        setSessions(mockSessions);\n        setTotal(mockSessions.length);\n        setLoading(false);\n      }, 1000);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to load sessions');\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    loadSessions();\n  }, [page, rowsPerPage, typeFilter, userSearch]);\n\n  // Handlers\n  const handleViewDetails = (session: Session) => {\n    setSelectedSession(session);\n    setDetailDialogOpen(true);\n  };\n\n  const handleExportSessions = async () => {\n    try {\n      // Simulate export\n      alert('Export functionality would download CSV file');\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to export sessions');\n    }\n  };\n\n  const getSessionIcon = (type: string) => {\n    switch (type) {\n      case 'pranayama': return <Air color=\"primary\" />;\n      case 'meditation': return <Psychology color=\"secondary\" />;\n      case 'walking': return <DirectionsWalk color=\"success\" />;\n      default: return <SelfImprovement />;\n    }\n  };\n\n  const getCompletionColor = (completed: boolean) => {\n    return completed ? 'success' : 'warning';\n  };\n\n  const getStressColor = (level?: number) => {\n    if (!level) return 'default';\n    if (level <= 3) return 'success';\n    if (level <= 6) return 'warning';\n    return 'error';\n  };\n\n  if (loading && sessions.length === 0) {\n    return (\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"400px\">\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  return (\n    <Box>\n      {/* Header */}\n      <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={3}>\n        <Typography variant=\"h4\" component=\"h1\">\n          Session Management\n        </Typography>\n        <Button\n          variant=\"contained\"\n          startIcon={<Download />}\n          onClick={handleExportSessions}\n          sx={{\n            background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\n          }}\n        >\n          Export Sessions\n        </Button>\n      </Box>\n\n      {/* Stats Cards */}\n      <Grid container spacing={3} mb={3}>\n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Box display=\"flex\" alignItems=\"center\">\n                <Avatar sx={{ bgcolor: 'primary.main', mr: 2 }}>\n                  <SelfImprovement />\n                </Avatar>\n                <Box>\n                  <Typography color=\"textSecondary\" gutterBottom variant=\"overline\">\n                    Total Sessions\n                  </Typography>\n                  <Typography variant=\"h6\">{total.toLocaleString()}</Typography>\n                </Box>\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n        \n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Box display=\"flex\" alignItems=\"center\">\n                <Avatar sx={{ bgcolor: 'success.main', mr: 2 }}>\n                  <TrendingUp />\n                </Avatar>\n                <Box>\n                  <Typography color=\"textSecondary\" gutterBottom variant=\"overline\">\n                    Completed Rate\n                  </Typography>\n                  <Typography variant=\"h6\">\n                    {Math.round((sessions.filter(s => s.completed).length / sessions.length) * 100)}%\n                  </Typography>\n                </Box>\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n        \n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Box display=\"flex\" alignItems=\"center\">\n                <Avatar sx={{ bgcolor: 'warning.main', mr: 2 }}>\n                  <AccessTime />\n                </Avatar>\n                <Box>\n                  <Typography color=\"textSecondary\" gutterBottom variant=\"overline\">\n                    Avg Duration\n                  </Typography>\n                  <Typography variant=\"h6\">\n                    {Math.round(sessions.reduce((acc, s) => acc + s.duration, 0) / sessions.length)} min\n                  </Typography>\n                </Box>\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n        \n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Box display=\"flex\" alignItems=\"center\">\n                <Avatar sx={{ bgcolor: 'info.main', mr: 2 }}>\n                  <Favorite />\n                </Avatar>\n                <Box>\n                  <Typography color=\"textSecondary\" gutterBottom variant=\"overline\">\n                    Avg Stress Reduction\n                  </Typography>\n                  <Typography variant=\"h6\">-2.1</Typography>\n                </Box>\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n\n      {error && (\n        <Alert severity=\"error\" sx={{ mb: 3 }}>\n          {error}\n        </Alert>\n      )}\n\n      {/* Filters */}\n      <Card sx={{ mb: 3 }}>\n        <CardContent>\n          <Grid container spacing={2} alignItems=\"center\">\n            <Grid item xs={12} md={4}>\n              <TextField\n                fullWidth\n                label=\"Search by user ID\"\n                value={userSearch}\n                onChange={(e) => setUserSearch(e.target.value)}\n              />\n            </Grid>\n            \n            <Grid item xs={12} md={3}>\n              <FormControl fullWidth>\n                <InputLabel>Session Type</InputLabel>\n                <Select\n                  value={typeFilter}\n                  label=\"Session Type\"\n                  onChange={(e) => setTypeFilter(e.target.value)}\n                >\n                  <MenuItem value=\"\">All Types</MenuItem>\n                  <MenuItem value=\"pranayama\">Pranayama</MenuItem>\n                  <MenuItem value=\"meditation\">Meditation</MenuItem>\n                  <MenuItem value=\"walking\">Walking</MenuItem>\n                </Select>\n              </FormControl>\n            </Grid>\n            \n            <Grid item xs={12} md={3}>\n              <Button\n                fullWidth\n                variant=\"outlined\"\n                startIcon={<FilterList />}\n                onClick={() => {\n                  setUserSearch('');\n                  setTypeFilter('');\n                  setPage(0);\n                }}\n              >\n                Clear Filters\n              </Button>\n            </Grid>\n          </Grid>\n        </CardContent>\n      </Card>\n\n      {/* Sessions Table */}\n      <Card>\n        <TableContainer>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell>Type</TableCell>\n                <TableCell>User ID</TableCell>\n                <TableCell>Date & Time</TableCell>\n                <TableCell>Duration</TableCell>\n                <TableCell>Status</TableCell>\n                <TableCell>Avg HR</TableCell>\n                <TableCell>Stress Level</TableCell>\n                <TableCell>Experience</TableCell>\n                <TableCell align=\"right\">Actions</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {sessions.map((session) => (\n                <TableRow key={session._id} hover>\n                  <TableCell>\n                    <Box display=\"flex\" alignItems=\"center\">\n                      {getSessionIcon(session.type)}\n                      <Typography variant=\"body2\" sx={{ ml: 1, textTransform: 'capitalize' }}>\n                        {session.type}\n                      </Typography>\n                    </Box>\n                  </TableCell>\n                  \n                  <TableCell>\n                    <Typography variant=\"body2\" fontFamily=\"monospace\">\n                      {session.userId.slice(-8)}\n                    </Typography>\n                  </TableCell>\n                  \n                  <TableCell>\n                    <Typography variant=\"body2\">\n                      {format(new Date(session.startTime), 'MMM dd, yyyy')}\n                    </Typography>\n                    <Typography variant=\"caption\" color=\"textSecondary\">\n                      {format(new Date(session.startTime), 'HH:mm')}\n                    </Typography>\n                  </TableCell>\n                  \n                  <TableCell>\n                    <Typography variant=\"body2\">\n                      {session.duration} min\n                    </Typography>\n                  </TableCell>\n                  \n                  <TableCell>\n                    <Chip\n                      label={session.completed ? 'Completed' : 'Incomplete'}\n                      color={getCompletionColor(session.completed)}\n                      size=\"small\"\n                    />\n                  </TableCell>\n                  \n                  <TableCell>\n                    {session.vitalSigns.avgHeartRate ? (\n                      <Typography variant=\"body2\">\n                        {session.vitalSigns.avgHeartRate} bpm\n                      </Typography>\n                    ) : (\n                      <Typography variant=\"body2\" color=\"textSecondary\">\n                        N/A\n                      </Typography>\n                    )}\n                  </TableCell>\n                  \n                  <TableCell>\n                    {session.vitalSigns.stressLevel ? (\n                      <Chip\n                        label={session.vitalSigns.stressLevel.toFixed(1)}\n                        color={getStressColor(session.vitalSigns.stressLevel)}\n                        size=\"small\"\n                      />\n                    ) : (\n                      <Typography variant=\"body2\" color=\"textSecondary\">\n                        N/A\n                      </Typography>\n                    )}\n                  </TableCell>\n                  \n                  <TableCell>\n                    {session.userExperience.enjoymentRating ? (\n                      <Box>\n                        <Typography variant=\"body2\">\n                          {session.userExperience.enjoymentRating}/10\n                        </Typography>\n                        <LinearProgress\n                          variant=\"determinate\"\n                          value={session.userExperience.enjoymentRating * 10}\n                          sx={{ width: 60, height: 4, borderRadius: 2 }}\n                        />\n                      </Box>\n                    ) : (\n                      <Typography variant=\"body2\" color=\"textSecondary\">\n                        N/A\n                      </Typography>\n                    )}\n                  </TableCell>\n                  \n                  <TableCell align=\"right\">\n                    <IconButton\n                      onClick={() => handleViewDetails(session)}\n                      size=\"small\"\n                    >\n                      <Visibility />\n                    </IconButton>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </TableContainer>\n        \n        <TablePagination\n          rowsPerPageOptions={[10, 25, 50, 100]}\n          component=\"div\"\n          count={total}\n          rowsPerPage={rowsPerPage}\n          page={page}\n          onPageChange={(_, newPage) => setPage(newPage)}\n          onRowsPerPageChange={(e) => {\n            setRowsPerPage(parseInt(e.target.value, 10));\n            setPage(0);\n          }}\n        />\n      </Card>\n\n      {/* Session Detail Dialog */}\n      <Dialog\n        open={detailDialogOpen}\n        onClose={() => setDetailDialogOpen(false)}\n        maxWidth=\"md\"\n        fullWidth\n      >\n        <DialogTitle>\n          <Box display=\"flex\" alignItems=\"center\">\n            {selectedSession && getSessionIcon(selectedSession.type)}\n            <Typography variant=\"h6\" sx={{ ml: 1 }}>\n              Session Details\n            </Typography>\n          </Box>\n        </DialogTitle>\n        \n        <DialogContent>\n          {selectedSession && (\n            <Grid container spacing={3}>\n              <Grid item xs={12} md={6}>\n                <Typography variant=\"h6\" gutterBottom>\n                  Session Info\n                </Typography>\n                <Box sx={{ mb: 2 }}>\n                  <Typography variant=\"body2\" color=\"textSecondary\">\n                    Type: {selectedSession.type}\n                  </Typography>\n                  <Typography variant=\"body2\" color=\"textSecondary\">\n                    Duration: {selectedSession.duration} minutes\n                  </Typography>\n                  <Typography variant=\"body2\" color=\"textSecondary\">\n                    Status: {selectedSession.completed ? 'Completed' : 'Incomplete'}\n                  </Typography>\n                </Box>\n                \n                <Typography variant=\"h6\" gutterBottom>\n                  User Experience\n                </Typography>\n                {selectedSession.userExperience && (\n                  <Grid container spacing={2}>\n                    <Grid item xs={6}>\n                      <Typography variant=\"body2\">\n                        Energy: {selectedSession.userExperience.energyBefore} → {selectedSession.userExperience.energyAfter}\n                      </Typography>\n                    </Grid>\n                    <Grid item xs={6}>\n                      <Typography variant=\"body2\">\n                        Stress: {selectedSession.userExperience.stressBefore} → {selectedSession.userExperience.stressAfter}\n                      </Typography>\n                    </Grid>\n                    <Grid item xs={6}>\n                      <Typography variant=\"body2\">\n                        Difficulty: {selectedSession.userExperience.difficultyRating}/5\n                      </Typography>\n                    </Grid>\n                    <Grid item xs={6}>\n                      <Typography variant=\"body2\">\n                        Enjoyment: {selectedSession.userExperience.enjoymentRating}/10\n                      </Typography>\n                    </Grid>\n                  </Grid>\n                )}\n              </Grid>\n              \n              <Grid item xs={12} md={6}>\n                <Typography variant=\"h6\" gutterBottom>\n                  Vital Signs Timeline\n                </Typography>\n                <ResponsiveContainer width=\"100%\" height={200}>\n                  <LineChart data={mockVitalSignsTimeline}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"time\" />\n                    <YAxis />\n                    <Tooltip />\n                    <Line type=\"monotone\" dataKey=\"heartRate\" stroke=\"#8884d8\" name=\"Heart Rate\" />\n                    <Line type=\"monotone\" dataKey=\"stress\" stroke=\"#ff7300\" name=\"Stress Level\" />\n                  </LineChart>\n                </ResponsiveContainer>\n              </Grid>\n            </Grid>\n          )}\n        </DialogContent>\n        \n        <DialogActions>\n          <Button onClick={() => setDetailDialogOpen(false)}>Close</Button>\n        </DialogActions>\n      </Dialog>\n    </Box>\n  );\n};\n\nexport default Sessions;