#!/usr/bin/env node\n\n/**\n * Pranayama Coach - Setup Check Script\n * Verifies that all components are properly configured for deployment\n */\n\nconst fs = require('fs');\nconst path = require('path');\nconst { execSync } = require('child_process');\n\n// Colors for console output\nconst colors = {\n  reset: '\\x1b[0m',\n  red: '\\x1b[31m',\n  green: '\\x1b[32m',\n  yellow: '\\x1b[33m',\n  blue: '\\x1b[34m',\n  magenta: '\\x1b[35m',\n  cyan: '\\x1b[36m'\n};\n\nclass SetupChecker {\n  constructor() {\n    this.issues = [];\n    this.warnings = [];\n    this.successes = [];\n  }\n\n  log(message, type = 'info') {\n    const timestamp = new Date().toISOString().split('T')[1].split('.')[0];\n    const colorMap = {\n      error: colors.red,\n      success: colors.green,\n      warning: colors.yellow,\n      info: colors.blue\n    };\n    \n    console.log(`${colorMap[type]}[${timestamp}] ${message}${colors.reset}`);\n  }\n\n  addIssue(message) {\n    this.issues.push(message);\n    this.log(`❌ ${message}`, 'error');\n  }\n\n  addWarning(message) {\n    this.warnings.push(message);\n    this.log(`⚠️  ${message}`, 'warning');\n  }\n\n  addSuccess(message) {\n    this.successes.push(message);\n    this.log(`✅ ${message}`, 'success');\n  }\n\n  checkFileExists(filePath, required = true) {\n    const exists = fs.existsSync(filePath);\n    if (exists) {\n      this.addSuccess(`Found: ${filePath}`);\n    } else if (required) {\n      this.addIssue(`Missing required file: ${filePath}`);\n    } else {\n      this.addWarning(`Optional file missing: ${filePath}`);\n    }\n    return exists;\n  }\n\n  checkCommand(command, description) {\n    try {\n      execSync(command, { stdio: 'ignore' });\n      this.addSuccess(`Command available: ${description}`);\n      return true;\n    } catch (error) {\n      this.addIssue(`Command not found: ${description} (${command})`);\n      return false;\n    }\n  }\n\n  checkNodeVersion() {\n    try {\n      const version = execSync('node --version', { encoding: 'utf8' }).trim();\n      const versionNumber = version.replace('v', '');\n      const [major] = versionNumber.split('.').map(Number);\n      \n      if (major >= 18) {\n        this.addSuccess(`Node.js version: ${version} (✓ >= 18)`);\n      } else {\n        this.addIssue(`Node.js version ${version} is too old. Required: >= 18`);\n      }\n    } catch (error) {\n      this.addIssue('Node.js not installed');\n    }\n  }\n\n  checkPackageJson(directory, type) {\n    const packagePath = path.join(directory, 'package.json');\n    if (!this.checkFileExists(packagePath)) {\n      return false;\n    }\n\n    try {\n      const packageJson = JSON.parse(fs.readFileSync(packagePath, 'utf8'));\n      this.addSuccess(`${type} package.json is valid`);\n      \n      // Check for required scripts\n      const requiredScripts = {\n        backend: ['start', 'dev', 'test'],\n        'web-dashboard': ['start', 'build', 'test']\n      };\n      \n      if (requiredScripts[type]) {\n        const scripts = packageJson.scripts || {};\n        requiredScripts[type].forEach(script => {\n          if (scripts[script]) {\n            this.addSuccess(`${type} has '${script}' script`);\n          } else {\n            this.addWarning(`${type} missing '${script}' script`);\n          }\n        });\n      }\n      \n      return true;\n    } catch (error) {\n      this.addIssue(`${type} package.json is invalid: ${error.message}`);\n      return false;\n    }\n  }\n\n  checkEnvironmentFiles() {\n    const envFiles = [\n      { path: 'backend/.env.example', required: true },\n      { path: 'backend/.env.production', required: true },\n      { path: 'web-dashboard/.env.example', required: true },\n      { path: 'web-dashboard/.env.production', required: true }\n    ];\n\n    envFiles.forEach(({ path: filePath, required }) => {\n      this.checkFileExists(filePath, required);\n    });\n  }\n\n  checkDeploymentFiles() {\n    const deploymentFiles = [\n      { path: '.github/workflows/deploy.yml', required: true },\n      { path: 'backend/Dockerfile', required: true },\n      { path: 'backend/railway.json', required: true },\n      { path: 'web-dashboard/netlify.toml', required: true },\n      { path: 'scripts/deploy.sh', required: true }\n    ];\n\n    deploymentFiles.forEach(({ path: filePath, required }) => {\n      this.checkFileExists(filePath, required);\n    });\n\n    // Check if deploy script is executable\n    try {\n      const stats = fs.statSync('scripts/deploy.sh');\n      if (stats.mode & 0o111) {\n        this.addSuccess('Deploy script is executable');\n      } else {\n        this.addWarning('Deploy script is not executable (run: chmod +x scripts/deploy.sh)');\n      }\n    } catch (error) {\n      // File doesn't exist, already reported above\n    }\n  }\n\n  checkDocumentation() {\n    const docs = [\n      'README.md',\n      'DEPLOYMENT_README.md',\n      'docs/ARCHITECTURE.md',\n      'docs/SETUP_GUIDE.md',\n      'docs/NETLIFY_DEPLOYMENT.md'\n    ];\n\n    docs.forEach(doc => {\n      this.checkFileExists(doc, false);\n    });\n  }\n\n  checkGitRepository() {\n    if (fs.existsSync('.git')) {\n      this.addSuccess('Git repository initialized');\n      \n      try {\n        const remotes = execSync('git remote -v', { encoding: 'utf8' });\n        if (remotes.includes('origin')) {\n          this.addSuccess('Git remote origin configured');\n        } else {\n          this.addWarning('No git remote origin configured');\n        }\n      } catch (error) {\n        this.addWarning('Could not check git remotes');\n      }\n    } else {\n      this.addIssue('Not a Git repository (run: git init)');\n    }\n  }\n\n  checkDirectoryStructure() {\n    const requiredDirs = [\n      'backend',\n      'web-dashboard',\n      'apps/pranayama-coach-basic',\n      'docs',\n      'scripts',\n      '.github/workflows'\n    ];\n\n    requiredDirs.forEach(dir => {\n      if (fs.existsSync(dir)) {\n        this.addSuccess(`Directory exists: ${dir}`);\n      } else {\n        this.addIssue(`Missing directory: ${dir}`);\n      }\n    });\n  }\n\n  async run() {\n    console.log(`${colors.cyan}🔍 Pranayama Coach - Setup Check${colors.reset}`);\n    console.log(`${colors.cyan}===================================${colors.reset}\\n`);\n\n    this.log('Checking system requirements...', 'info');\n    this.checkNodeVersion();\n    this.checkCommand('npm --version', 'npm');\n    this.checkCommand('git --version', 'git');\n    \n    console.log();\n    this.log('Checking directory structure...', 'info');\n    this.checkDirectoryStructure();\n    \n    console.log();\n    this.log('Checking project files...', 'info');\n    this.checkPackageJson('backend', 'backend');\n    this.checkPackageJson('web-dashboard', 'web-dashboard');\n    \n    console.log();\n    this.log('Checking environment configuration...', 'info');\n    this.checkEnvironmentFiles();\n    \n    console.log();\n    this.log('Checking deployment configuration...', 'info');\n    this.checkDeploymentFiles();\n    \n    console.log();\n    this.log('Checking documentation...', 'info');\n    this.checkDocumentation();\n    \n    console.log();\n    this.log('Checking Git repository...', 'info');\n    this.checkGitRepository();\n    \n    // Final summary\n    console.log(`\\n${colors.magenta}📊 Summary${colors.reset}`);\n    console.log(`${colors.magenta}==========${colors.reset}`);\n    console.log(`✅ Successes: ${this.successes.length}`);\n    console.log(`⚠️  Warnings: ${this.warnings.length}`);\n    console.log(`❌ Issues: ${this.issues.length}`);\n    \n    if (this.issues.length === 0) {\n      console.log(`\\n${colors.green}🎉 All checks passed! Your project is ready for deployment.${colors.reset}`);\n      console.log(`\\n${colors.blue}Next steps:${colors.reset}`);\n      console.log('1. Configure your environment variables');\n      console.log('2. Set up GitHub secrets for CI/CD');\n      console.log('3. Run: ./scripts/deploy.sh full');\n    } else {\n      console.log(`\\n${colors.red}❌ Please fix the issues above before deploying.${colors.reset}`);\n      \n      if (this.warnings.length > 0) {\n        console.log(`\\n${colors.yellow}⚠️  Warnings can be addressed later but are recommended to fix.${colors.reset}`);\n      }\n    }\n    \n    console.log(`\\n${colors.cyan}For detailed setup instructions, see:${colors.reset}`);\n    console.log('• DEPLOYMENT_README.md - Complete deployment guide');\n    console.log('• docs/SETUP_GUIDE.md - Development setup');\n    console.log('• docs/NETLIFY_DEPLOYMENT.md - Netlify-specific instructions');\n    \n    return this.issues.length === 0;\n  }\n}\n\n// Run the setup checker\nif (require.main === module) {\n  const checker = new SetupChecker();\n  checker.run().then(success => {\n    process.exit(success ? 0 : 1);\n  }).catch(error => {\n    console.error(`${colors.red}Setup check failed: ${error.message}${colors.reset}`);\n    process.exit(1);\n  });\n}\n\nmodule.exports = SetupChecker;